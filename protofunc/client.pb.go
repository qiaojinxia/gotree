// Code generated by protoc-gen-go. DO NOT EDIT.
// source: client.proto

package protofunc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
	protomsg "rpccode/protomsg"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("client.proto", fileDescriptor_014de31d7ac8c57c) }

var fileDescriptor_014de31d7ac8c57c = []byte{
	// 134 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x49, 0xce, 0xc9, 0x4c,
	0xcd, 0x2b, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x04, 0x53, 0x69, 0xa5, 0x79, 0xc9,
	0x52, 0x52, 0x45, 0x05, 0xc9, 0xc9, 0xf9, 0x29, 0xa9, 0xfa, 0x60, 0xa1, 0xdc, 0xe2, 0x74, 0xfd,
	0xdc, 0xe2, 0x74, 0x88, 0x32, 0xa3, 0x50, 0x2e, 0x4e, 0x67, 0xb0, 0x36, 0xdf, 0xe2, 0x74, 0x21,
	0x0f, 0x2e, 0xde, 0x80, 0xd2, 0xe2, 0x0c, 0xdf, 0xe2, 0xf4, 0xe0, 0x92, 0xa2, 0xd4, 0xc4, 0x5c,
	0x21, 0x71, 0x3d, 0x98, 0x16, 0xbd, 0xa0, 0x82, 0xe4, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0x62, 0x90,
	0x4a, 0x29, 0x09, 0x34, 0x89, 0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54, 0xdf, 0xe2, 0x74, 0x25, 0x06,
	0x0d, 0x46, 0x03, 0xc6, 0x24, 0x36, 0xb0, 0xb4, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x6b, 0x11,
	0xee, 0x1e, 0x94, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ClientMsgClient is the client API for ClientMsg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ClientMsgClient interface {
	// rpc PushMsg (protomsg.RpcMessageReq) returns (protomsg.RpcMessageRsp) {}
	PushMsgStream(ctx context.Context, opts ...grpc.CallOption) (ClientMsg_PushMsgStreamClient, error)
}

type clientMsgClient struct {
	cc *grpc.ClientConn
}

func NewClientMsgClient(cc *grpc.ClientConn) ClientMsgClient {
	return &clientMsgClient{cc}
}

func (c *clientMsgClient) PushMsgStream(ctx context.Context, opts ...grpc.CallOption) (ClientMsg_PushMsgStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ClientMsg_serviceDesc.Streams[0], "/protofunc.ClientMsg/PushMsgStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &clientMsgPushMsgStreamClient{stream}
	return x, nil
}

type ClientMsg_PushMsgStreamClient interface {
	Send(*protomsg.RpcRequestMsg) error
	Recv() (*protomsg.RpcResponseMsg, error)
	grpc.ClientStream
}

type clientMsgPushMsgStreamClient struct {
	grpc.ClientStream
}

func (x *clientMsgPushMsgStreamClient) Send(m *protomsg.RpcRequestMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *clientMsgPushMsgStreamClient) Recv() (*protomsg.RpcResponseMsg, error) {
	m := new(protomsg.RpcResponseMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ClientMsgServer is the server API for ClientMsg service.
type ClientMsgServer interface {
	// rpc PushMsg (protomsg.RpcMessageReq) returns (protomsg.RpcMessageRsp) {}
	PushMsgStream(ClientMsg_PushMsgStreamServer) error
}

// UnimplementedClientMsgServer can be embedded to have forward compatible implementations.
type UnimplementedClientMsgServer struct {
}

func (*UnimplementedClientMsgServer) PushMsgStream(srv ClientMsg_PushMsgStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method PushMsgStream not implemented")
}

func RegisterClientMsgServer(s *grpc.Server, srv ClientMsgServer) {
	s.RegisterService(&_ClientMsg_serviceDesc, srv)
}

func _ClientMsg_PushMsgStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ClientMsgServer).PushMsgStream(&clientMsgPushMsgStreamServer{stream})
}

type ClientMsg_PushMsgStreamServer interface {
	Send(*protomsg.RpcResponseMsg) error
	Recv() (*protomsg.RpcRequestMsg, error)
	grpc.ServerStream
}

type clientMsgPushMsgStreamServer struct {
	grpc.ServerStream
}

func (x *clientMsgPushMsgStreamServer) Send(m *protomsg.RpcResponseMsg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *clientMsgPushMsgStreamServer) Recv() (*protomsg.RpcRequestMsg, error) {
	m := new(protomsg.RpcRequestMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ClientMsg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protofunc.ClientMsg",
	HandlerType: (*ClientMsgServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PushMsgStream",
			Handler:       _ClientMsg_PushMsgStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "client.proto",
}
